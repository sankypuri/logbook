export default Form;
export type Options = {
    readOnly?: boolean;
    noAlerts?: boolean;
    i18n?: object;
    template?: string;
    saveDraft?: boolean;
};
export type FormProps = {
    src?: string;
    url?: string;
    form?: object;
    submission?: object;
    options?: Options;
    onPrevPage?: Function;
    onNextPage?: Function;
    onCancel?: Function;
    onChange?: Function;
    onCustomEvent?: Function;
    onComponentChange?: Function;
    onSubmit?: Function;
    onSubmitDone?: Function;
    onFormLoad?: Function;
    onError?: Function;
    onRender?: Function;
    onAttach?: Function;
    onBuild?: Function;
    onFocus?: Function;
    onBlur?: Function;
    onInitialized?: Function;
    formReady?: Function;
    formioform?: any;
};
/**
 * @param {FormProps} props
 * @returns {JSX.Element}
 */
declare function Form(props: FormProps): JSX.Element;
declare namespace Form {
    namespace propTypes {
        const src: any;
        const url: any;
        const form: any;
        const submission: any;
        const options: any;
        const onPrevPage: any;
        const onNextPage: any;
        const onCancel: any;
        const onChange: any;
        const onCustomEvent: any;
        const onComponentChange: any;
        const onSubmit: any;
        const onSubmitDone: any;
        const onFormLoad: any;
        const onError: any;
        const onRender: any;
        const onAttach: any;
        const onBuild: any;
        const onFocus: any;
        const onBlur: any;
        const onInitialized: any;
        const formReady: any;
        const formioform: any;
    }
    function getDefaultEmitter(): EventEmitter;
}
import EventEmitter from "eventemitter2";
//# sourceMappingURL=Form.d.ts.map